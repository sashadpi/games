<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Sudoku</title>
    <style>
        table {
            border-collapse: collapse;
        }
        td {
            width: 50px;
            height: 50px;
            text-align: center;
            border: 1px solid black;
            font-size: 30px;
        }
        .input-cell {
            background-color: lightgray;
            cursor: pointer;
        }
        /* Общие стили для страницы */
        body {
            display: flex;
            align-items: center;
            justify-content: center;
            height: 100vh;
            margin: 0;
        }

       
		 /* Стили для надписи "Sudoku" */
        #sudoku-title {
            font-size: 24px;
            margin-bottom: 20px; /* Расстояние между надписью и игрой */
        }

        /* Стили для контейнера с игрой (по центру) */
        #game-container {
            width: 800px; /* Ширина вашей игры */
            height: 800px; /* Высота вашей игры */
            border: 2px solid black;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
        }

        /* Стили для кнопок */
        .button-container {
            display: flex;
            gap: 10px; /* Расстояние между кнопками */
        }
    </style>
</head>
<body>
    <h1>Sudoku</h1><br>
    <table><br>
        <tr>
            <td class="input-cell" id="cell-0-0"></td>
            <td class="input-cell" id="cell-0-1"></td>
            <td class="input-cell" id="cell-0-2"></td>
            <td class="input-cell" id="cell-0-3"></td>
            <td class="input-cell" id="cell-0-4"></td>
            <td class="input-cell" id="cell-0-5"></td>
            <td class="input-cell" id="cell-0-6"></td>
            <td class="input-cell" id="cell-0-7"></td>
            <td class="input-cell" id="cell-0-8"></td>
        </tr>
        <tr>
            <td class="input-cell" id="cell-1-0"></td>
            <td class="input-cell" id="cell-1-1"></td>
            <td class="input-cell" id="cell-1-2"></td>
            <td class="input-cell" id="cell-1-3"></td>
            <td class="input-cell" id="cell-1-4"></td>
            <td class="input-cell" id="cell-1-5"></td>
            <td class="input-cell" id="cell-1-6"></td>
            <td class="input-cell" id="cell-1-7"></td>
            <td class="input-cell" id="cell-1-8"></td>
        </tr>
		<tr>
            <td class="input-cell" id="cell-1-0"></td>
            <td class="input-cell" id="cell-1-1"></td>
            <td class="input-cell" id="cell-1-2"></td>
            <td class="input-cell" id="cell-1-3"></td>
            <td class="input-cell" id="cell-1-4"></td>
            <td class="input-cell" id="cell-1-5"></td>
            <td class="input-cell" id="cell-1-6"></td>
            <td class="input-cell" id="cell-1-7"></td>
            <td class="input-cell" id="cell-1-8"></td>
        </tr>
		<tr>
            <td class="input-cell" id="cell-1-0"></td>
            <td class="input-cell" id="cell-1-1"></td>
            <td class="input-cell" id="cell-1-2"></td>
            <td class="input-cell" id="cell-1-3"></td>
            <td class="input-cell" id="cell-1-4"></td>
            <td class="input-cell" id="cell-1-5"></td>
            <td class="input-cell" id="cell-1-6"></td>
            <td class="input-cell" id="cell-1-7"></td>
            <td class="input-cell" id="cell-1-8"></td>
        </tr><tr>
            <td class="input-cell" id="cell-1-0"></td>
            <td class="input-cell" id="cell-1-1"></td>
            <td class="input-cell" id="cell-1-2"></td>
            <td class="input-cell" id="cell-1-3"></td>
            <td class="input-cell" id="cell-1-4"></td>
            <td class="input-cell" id="cell-1-5"></td>
            <td class="input-cell" id="cell-1-6"></td>
            <td class="input-cell" id="cell-1-7"></td>
            <td class="input-cell" id="cell-1-8"></td>
        </tr>
		<tr>
            <td class="input-cell" id="cell-1-0"></td>
            <td class="input-cell" id="cell-1-1"></td>
            <td class="input-cell" id="cell-1-2"></td>
            <td class="input-cell" id="cell-1-3"></td>
            <td class="input-cell" id="cell-1-4"></td>
            <td class="input-cell" id="cell-1-5"></td>
            <td class="input-cell" id="cell-1-6"></td>
            <td class="input-cell" id="cell-1-7"></td>
            <td class="input-cell" id="cell-1-8"></td>
        </tr>
		<tr>
            <td class="input-cell" id="cell-1-0"></td>
            <td class="input-cell" id="cell-1-1"></td>
            <td class="input-cell" id="cell-1-2"></td>
            <td class="input-cell" id="cell-1-3"></td>
            <td class="input-cell" id="cell-1-4"></td>
            <td class="input-cell" id="cell-1-5"></td>
            <td class="input-cell" id="cell-1-6"></td>
            <td class="input-cell" id="cell-1-7"></td>
            <td class="input-cell" id="cell-1-8"></td>
        </tr>
		<tr>
            <td class="input-cell" id="cell-1-0"></td>
            <td class="input-cell" id="cell-1-1"></td>
            <td class="input-cell" id="cell-1-2"></td>
            <td class="input-cell" id="cell-1-3"></td>
            <td class="input-cell" id="cell-1-4"></td>
            <td class="input-cell" id="cell-1-5"></td>
            <td class="input-cell" id="cell-1-6"></td>
            <td class="input-cell" id="cell-1-7"></td>
            <td class="input-cell" id="cell-1-8"></td>
        </tr>
		<tr>
            <td class="input-cell" id="cell-1-0"></td>
            <td class="input-cell" id="cell-1-1"></td>
            <td class="input-cell" id="cell-1-2"></td>
            <td class="input-cell" id="cell-1-3"></td>
            <td class="input-cell" id="cell-1-4"></td>
            <td class="input-cell" id="cell-1-5"></td>
            <td class="input-cell" id="cell-1-6"></td>
            <td class="input-cell" id="cell-1-7"></td>
            <td class="input-cell" id="cell-1-8"></td>
        </tr>
        
    </table><br>
    <button onclick="generateSudoku()">Generate Sudoku</button><br>
    <button onclick="solveSudoku()">Solve Sudoku</button><br>
    <script>
        // 9x9 Sudoku grid
        const grid = new Array(9).fill(null).map(() => new Array(9).fill(0));
        const inputCells = document.querySelectorAll('.input-cell');

        // Initialize the grid
        for (let i = 0; i < 9; i++) {
            for (let j = 0; j < 9; j++) {
                inputCells[i * 9 + j].addEventListener('click', () => handleCellClick(i, j));
            }
        }

        // Function to handle cell clicks
        function handleCellClick(row, col) {
            const inputValue = prompt('Enter a value (1-9):');
            if (isValidMove(row, col, inputValue)) {
                grid[row][col] = parseInt(inputValue);
                inputCells[row * 9 + col].textContent = inputValue;
            } else {
                alert('Invalid move!');
            }
        }

        // Function to check if a move is valid
        function isValidMove(row, col, num) {
            // Check row and column
            for (let i = 0; i < 9; i++) {
                if (grid[row][i] === parseInt(num) || grid[i][col] === parseInt(num)) {
                    return false;
                }
            }

            // Check 3x3 subgrid
            const startRow = Math.floor(row / 3) * 3;
            const startCol = Math.floor(col / 3) * 3;
            for (let i = 0; i < 3; i++) {
                for (let j = 0; j < 3; j++) {
                    if (grid[startRow + i][startCol + j] === parseInt(num)) {
                        return false;
                    }
                }
            }

            return true;
        }

        function generateSudoku() {
    clearGrid();
    fillDiagonalSubgrids();
    solveSudoku();
    removeCells();
    displayGrid();
	}

		function clearGrid() {
		for (let i = 0; i < 9; i++) {
        for (let j = 0; j < 9; j++) {
            grid[i][j] = 0;
			}
		}
	}

function fillDiagonalSubgrids() {
    for (let i = 0; i < 9; i += 3) {
        fillSubgrid(i, i);
        solveSudoku();
    }
}

function fillSubgrid(row, col) {
    let nums = shuffle([1, 2, 3, 4, 5, 6, 7, 8, 9]);
    for (let i = 0; i < 3; i++) {
        for (let j = 0; j < 3; j++) {
            grid[row + i][col + j] = nums.pop();
        }
    }
}

function shuffle(arr) {
    for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
    }
    return arr;
}

function removeCells() {
    const cellsToRemove = 45; // Adjust the number of cells to remove as needed
    for (let i = 0; i < cellsToRemove; i++) {
        let row, col;
        do {
            row = Math.floor(Math.random() * 9);
            col = Math.floor(Math.random() * 9);
        } while (grid[row][col] === 0);
        grid[row][col] = 0;
    }
}

function displayGrid() {
    for (let i = 0; i < 9; i++) {
        for (let j = 0; j < 9; j++) {
            if (grid[i][j] !== 0) {
                inputCells[i * 9 + j].textContent = grid[i][j];
            } else {
                inputCells[i * 9 + j].textContent = "";
            }
        }
    }
}


        // Function to solve a Sudoku puzzle
        function solveSudoku() {
    for (let row = 0; row < 9; row++) {
        for (let col = 0; col < 9; col++) {
            if (grid[row][col] === 0) {
                for (let num = 1; num <= 9; num++) {
                    if (isValidMove(row, col, num)) {
                        grid[row][col] = num;
                        inputCells[row * 9 + col].textContent = num;
                        if (solveSudoku()) {
                            return true; // Рекурсивный вызов
                        }
                        grid[row][col] = 0; // Если рекурсивный вызов не привел к решению, откат
                        inputCells[row * 9 + col].textContent = "";
                    }
                }
                return false; // Если не нашли допустимое значение для текущей ячейки
            }
        }
    }
    return true; // Если все ячейки заполнены и не осталось пустых
}

    </script>
</body>
</html>
